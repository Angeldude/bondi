# 4 "lex.mll"
 

(* header code *)      

open Lexing
open Parsing
open Datum
open P_data
open Parse


(* generates an Ocaml Hashtbl from a list of key/value pairs.
   Used to store mathematical functions and keywords.   *)

let hash_table_from_list n lst =
  let tbl = Hashtbl.create n
  in let addEntry (s,kw) = Hashtbl.add tbl s kw
  in 
  List.iter addEntry lst;
  tbl
;;     

type token = EOS | Word of string | Err;;


    (* keywords *)

let keyword_table =          (* 97 is a prime larger than table size *)
  hash_table_from_list 97 [  

  "all",                 ALL;
  "and",       		 AND;
  "array",               ARRAY; 
  "as",                  AS;
  "begin",               BEGIN;
  "class",               CLASS;
(*> CPC *)
  "cpc",                 CPC;         (* Used to denote process cases from CPC *)
(*< CPC *)
  "datatype",  		 DATATYPE;
  "do",                  DO;
  "discontinuous",       DISCONTINUOUS;
  "else",     		 ELSE;
  "end",                 END;
  "entry",               ENTRY;
  "eqcons",              EQCONS;
  "ext",                 EXT;
  "extends",             EXTENDS;
  "False",               FALSE;
  "for",                 FOR;
  "fun",       		 FUN;
  "generalise",          GENERALISE;
  "if",        		 IF;
  "in",        		 IN;
  "lengthv",             LENGTHV;
  "let",       		 LET;
  "lin",       		 LIN;
  "match",     		 MATCH;
  "method",              METHOD;
  "new",                 NEW;
  "newarray",            NEWARRAY;
  "of",        		 OF;
  "rec",                 REC;
  "Ref",                 REFCONS;
  "ref",                 REF;
(*> CPC *)
  "rest",                REST;              (* Used to denote restrictions *)
(*< CPC *)
  "sleep",               SLEEP;
  "spawn",               SPAWN;
  "static",              STATIC;
  "super",               SUPER;
  "then",      		 THEN;
  "to",        		 TO;
  "True",                TRUE;
  "type",      		 TYPE;
  "Un",                  UN;
  "view",                VIEW;
  "where",               WHERE;
  "isRef",		 ISREF;
  "isArray",		 ISARRAY;
  "while",               WHILE;
  "with",      		 WITH
 ] 
;;


let stringParser lexer lexbuf = 
let wordlist =
let rec next strList =
match lexer lexbuf with
EOS -> strList
| Word(s) -> next (s::strList)
| Err -> next strList
in
next []
in
List.fold_right (^) (List.rev wordlist) ""
;;


let symbol_table =
  (* alphabetical by token *) 
  hash_table_from_list 29 [
  "!",          BANG;
  "|",          BAR;
  "&&",         BOOL_AND;
  "||",         BOOL_OR;
  ":",          COLON;
  "::",         DBLCOLON; 
  ".",          DOT;
  "=",          EQUAL;
  "==",         EQUALOP;
  ">",          GREATERTHAN;
  "<",          LESSTHAN;
  "-->",        LONGRARROW;
  "-",          MINUS;
  "%",          PERCENT;
  "+=",         PLUSEQUAL;
  "->",         RARROW

]

let is_rel_op s = 
  let rec test = function
      -1 -> false
    | i -> match s.[i] with
        '<' | '=' | '>' -> true
      | _ -> test (i - 1)
  in
  s.[0] != ':' &&
  test (String.length s - 1)

let rec symbol s =
  try Hashtbl.find symbol_table s
  with Not_found ->
    if is_rel_op s then RELOP s else
    match s.[0] with
      '$' | '.' | '?' | '^' -> MISCOP s
    | '-' | '+' | '|' -> ADDOP s
    | '*' when String.length s >= 2 && s.[1] == '*' -> EXPOP s
    | '*' | '/' | '%' | '&' -> MULTOP s
    | _ -> basicError (s^" is not a recognised symbol") 


let hex_char2int s =
  let c = Char.code s
  in 
  match s with
    _ when (s >= '0' && s <= '9') -> (* CHANGED & TO && !!!! *)
      c - (Char.code '0') 
  | _ when (s >= 'a' && s <= 'f') -> (* CHANGED & TO && !!!! *)
      (c - (Char.code 'a')) + 10 
  | _ when (s >= 'A' && s <= 'F') -> (* CHANGED & TO && !!!! *)
      (c - (Char.code 'A')) + 10 
  | _ -> basicError "in hexadecimal character"
;; 


(* hexint_of_string : string -> int *)

(* converts a string representing a hex number to integer value *)
(* assumes that string begins with "0x" or "0X"                 *)

let hexint_of_string s =
  let len = String.length s
  in if (s.[0] = '-') then 
    let value = ref (- (hex_char2int s.[3]))
    in 
    for i = 4 to (len - 1) do
      value := !value * 16 - (hex_char2int s.[i])
    done;
    !value
  else
    let value = ref (hex_char2int s.[2])
    in 
    for i = 3 to (len - 1) do
      value := !value * 16 + (hex_char2int s.[i])
    done;
    !value
;;


let lexeme_length lexbuf = lexbuf.lex_curr_pos - lexbuf.lex_start_pos


let buf_pos = ref 0
let last_buf_pos = ref 0
let comment_depth = ref 0
let line_number = ref 1    (* line number tracking for %use *)
;;
let incr_lex_counters lexbuf =
  incr line_number;
  last_buf_pos := !buf_pos;
  buf_pos := lexeme_end lexbuf
;;


let spRegexp = "((\\\\n) | (\\\\t))*";;

let subSpChar  inputStr =
match inputStr with
| "\\\\n" -> "\n"
| "\\\\t" -> "\t"
| "\\\\" -> "\\"
| _ as s -> s
;;


# 212 "lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\079\000\160\000\235\000\069\001\037\000\225\255\226\255\
    \227\255\228\255\229\255\230\255\231\255\232\255\088\001\116\001\
    \237\255\031\001\145\001\183\001\095\000\253\255\094\001\255\255\
    \252\255\218\001\253\001\032\002\099\000\006\002\090\000\101\000\
    \102\000\103\000\104\000\131\000\132\000\133\000\134\000\136\000\
    \248\255\247\255\246\255\245\255\244\255\243\255\242\255\241\255\
    \240\255\151\000\164\000\239\255\238\255\080\002\090\002\112\002\
    \150\002\098\001\173\002\211\000\251\255\252\255\253\255\163\000\
    \163\000\255\255\254\255\196\000\253\255\254\255\255\255\221\002\
    \244\255\058\003\248\255\249\255\250\255\078\002\246\255\251\255\
    \252\255\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\035\000\034\000\033\000\032\000\031\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\021\000\021\000\
    \255\255\255\255\032\000\032\000\022\000\255\255\001\000\255\255\
    \255\255\004\000\006\000\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\020\000\255\255\
    \019\000\020\000\255\255\255\255\255\255\255\255\255\255\004\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\010\000\
    \255\255\010\000\255\255\255\255\255\255\008\000\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\028\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\060\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\068\000\000\000\000\000\000\000\072\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\004\000\016\000\018\000\004\000\004\000\004\000\017\000\
    \020\000\013\000\004\000\004\000\008\000\004\000\004\000\019\000\
    \015\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\004\000\005\000\004\000\004\000\004\000\004\000\
    \004\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\012\000\007\000\011\000\004\000\001\000\
    \005\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\010\000\004\000\009\000\006\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\024\000\052\000\049\000\048\000\047\000\046\000\045\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\044\000\043\000\042\000\041\000\001\000\040\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\050\000\051\000\066\000\065\000\070\000\000\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\000\000\000\000\000\000\062\000\000\000\000\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\064\000\000\000\063\000\000\000\002\000\
    \023\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\004\000\022\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\000\000\022\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\054\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\000\000\053\000\000\000\000\000\
    \000\000\000\000\054\000\004\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\004\000\004\000\004\000\004\000\
    \000\000\053\000\000\000\004\000\004\000\053\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\055\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\061\000\000\000\000\000\000\000\000\000\
    \004\000\053\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\004\000\004\000\000\000\004\000\004\000\025\000\000\000\
    \000\000\000\000\000\000\000\000\055\000\000\000\000\000\004\000\
    \000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\004\000\004\000\000\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\004\000\255\255\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\004\000\004\000\027\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\000\000\030\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\004\000\000\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\004\000\004\000\000\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\032\000\000\000\000\000\000\000\000\000\039\000\
    \038\000\000\000\000\000\037\000\036\000\000\000\000\000\000\000\
    \078\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
    \034\000\004\000\033\000\058\000\000\000\058\000\004\000\000\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\000\000\000\000\053\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\079\000\000\000\000\000\000\000\000\000\000\000\
    \083\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
    \000\000\000\000\000\000\000\000\082\000\000\000\000\000\053\000\
    \081\000\000\000\080\000\000\000\000\000\000\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\075\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\076\000\073\000\074\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\077\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\000\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\000\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\020\000\028\000\030\000\031\000\032\000\033\000\034\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\035\000\036\000\037\000\038\000\001\000\039\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\049\000\050\000\063\000\064\000\067\000\255\255\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\255\255\255\255\255\255\059\000\255\255\255\255\
    \255\255\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\059\000\255\255\059\000\255\255\002\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\017\000\255\255\
    \255\255\255\255\003\000\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\004\000\022\000\
    \004\000\004\000\004\000\004\000\255\255\255\255\255\255\004\000\
    \004\000\255\255\004\000\004\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\017\000\255\255\255\255\022\000\004\000\
    \255\255\004\000\004\000\004\000\004\000\004\000\014\000\255\255\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\014\000\255\255\255\255\
    \255\255\255\255\015\000\004\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\
    \255\255\255\255\018\000\255\255\018\000\018\000\018\000\018\000\
    \255\255\015\000\255\255\018\000\018\000\014\000\018\000\018\000\
    \018\000\004\000\255\255\255\255\067\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\018\000\015\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\059\000\255\255\255\255\255\255\255\255\
    \019\000\015\000\019\000\019\000\019\000\019\000\255\255\255\255\
    \255\255\019\000\019\000\255\255\019\000\019\000\019\000\255\255\
    \255\255\255\255\255\255\255\255\015\000\255\255\255\255\018\000\
    \255\255\019\000\255\255\019\000\019\000\019\000\019\000\019\000\
    \255\255\255\255\255\255\025\000\255\255\025\000\025\000\025\000\
    \025\000\255\255\255\255\255\255\025\000\025\000\255\255\025\000\
    \025\000\025\000\255\255\255\255\255\255\018\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\025\000\019\000\025\000\025\000\
    \025\000\025\000\025\000\255\255\255\255\255\255\026\000\017\000\
    \026\000\026\000\026\000\026\000\255\255\255\255\255\255\026\000\
    \026\000\255\255\026\000\026\000\026\000\029\000\255\255\255\255\
    \255\255\255\255\255\255\019\000\255\255\255\255\029\000\026\000\
    \025\000\026\000\026\000\026\000\026\000\026\000\255\255\255\255\
    \255\255\027\000\255\255\027\000\027\000\027\000\027\000\255\255\
    \255\255\255\255\027\000\027\000\255\255\027\000\027\000\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\025\000\255\255\
    \255\255\255\255\027\000\026\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\029\000\255\255\255\255\255\255\255\255\029\000\
    \029\000\255\255\255\255\029\000\029\000\255\255\255\255\255\255\
    \077\000\255\255\255\255\255\255\029\000\255\255\255\255\255\255\
    \029\000\026\000\029\000\053\000\255\255\053\000\027\000\255\255\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\027\000\255\255\255\255\054\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\077\000\255\255\255\255\255\255\255\255\255\255\
    \077\000\055\000\055\000\055\000\055\000\055\000\055\000\255\255\
    \255\255\255\255\255\255\255\255\077\000\255\255\255\255\054\000\
    \077\000\255\255\077\000\255\255\255\255\255\255\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \255\255\055\000\055\000\055\000\055\000\055\000\055\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\071\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\056\000\
    \056\000\056\000\056\000\056\000\056\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\073\000\255\255\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\255\255\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\071\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec mainLex lexbuf =
    __ocaml_lex_mainLex_rec lexbuf 0
and __ocaml_lex_mainLex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 222 "lex.mll"
        ( EOF )
# 545 "lex.ml"

  | 1 ->
# 225 "lex.mll"
                ( mainLex lexbuf )
# 550 "lex.ml"

  | 2 ->
# 226 "lex.mll"
        ( incr_lex_counters lexbuf; mainLex lexbuf )
# 555 "lex.ml"

  | 3 ->
# 230 "lex.mll"
    ( comment_depth := 1;
      commentLex lexbuf; 
      mainLex lexbuf )
# 562 "lex.ml"

  | 4 ->
# 236 "lex.mll"
    ( lineCommentLex lexbuf; 
      mainLex lexbuf )
# 568 "lex.ml"

  | 5 ->
# 240 "lex.mll"
    ( lineCommentLex lexbuf; 
      mainLex lexbuf )
# 574 "lex.ml"

  | 6 ->
# 243 "lex.mll"
    ( lineCommentLex lexbuf; 
      mainLex lexbuf )
# 580 "lex.ml"

  | 7 ->
# 248 "lex.mll"
                                ( CHARACTER '\007' )
# 585 "lex.ml"

  | 8 ->
# 249 "lex.mll"
                                ( CHARACTER '\b' )
# 590 "lex.ml"

  | 9 ->
# 250 "lex.mll"
                                ( CHARACTER '\027' )
# 595 "lex.ml"

  | 10 ->
# 251 "lex.mll"
                                ( CHARACTER '\012' )
# 600 "lex.ml"

  | 11 ->
# 252 "lex.mll"
                                ( CHARACTER '\n' )
# 605 "lex.ml"

  | 12 ->
# 253 "lex.mll"
                                ( CHARACTER '\r' )
# 610 "lex.ml"

  | 13 ->
# 254 "lex.mll"
                                ( CHARACTER '\t' )
# 615 "lex.ml"

  | 14 ->
# 255 "lex.mll"
                                ( CHARACTER '\\' )
# 620 "lex.ml"

  | 15 ->
# 256 "lex.mll"
                                ( CHARACTER '\'' )
# 625 "lex.ml"

  | 16 ->
# 257 "lex.mll"
                                ( CHARACTER '\013' )
# 630 "lex.ml"

  | 17 ->
# 259 "lex.mll"
                                ( CHARACTER (String.get (lexeme lexbuf) 
1) )
# 636 "lex.ml"

  | 18 ->
# 261 "lex.mll"
                                (STRING (stringParser stringLex lexbuf))
# 641 "lex.ml"

  | 19 ->
# 267 "lex.mll"
   ( INTEGER (hexint_of_string (lexeme lexbuf)) )
# 646 "lex.ml"

  | 20 ->
# 272 "lex.mll"
   ( FLOAT (float_of_string (lexeme lexbuf)) )
# 651 "lex.ml"

  | 21 ->
# 276 "lex.mll"
   ( INTEGER (int_of_string (lexeme lexbuf)) )
# 656 "lex.ml"

  | 22 ->
# 280 "lex.mll"
        ( LPAREN )
# 661 "lex.ml"

  | 23 ->
# 281 "lex.mll"
        ( RPAREN )
# 666 "lex.ml"

  | 24 ->
# 282 "lex.mll"
        ( LBRACKET )
# 671 "lex.ml"

  | 25 ->
# 283 "lex.mll"
        ( RBRACKET )
# 676 "lex.ml"

  | 26 ->
# 284 "lex.mll"
        ( LBRACE )
# 681 "lex.ml"

  | 27 ->
# 285 "lex.mll"
        ( RBRACE )
# 686 "lex.ml"

  | 28 ->
# 286 "lex.mll"
        ( COMMA )
# 691 "lex.ml"

  | 29 ->
# 288 "lex.mll"
        ( CPCBIND )
# 696 "lex.ml"

  | 30 ->
# 289 "lex.mll"
        ( CPCPRO )
# 701 "lex.ml"

  | 31 ->
# 291 "lex.mll"
        ( if lexeme_length lexbuf == 1 then SEMICOLON else SEMISEMI )
# 706 "lex.ml"

  | 32 ->
# 297 "lex.mll"
    ( symbol (lexeme lexbuf) )
# 711 "lex.ml"

  | 33 ->
# 302 "lex.mll"
    (
      let s = lexeme lexbuf in
      try Hashtbl.find keyword_table s
      with Not_found -> try Hashtbl.find symbol_table s
      with Not_found -> try NOPER (Hashtbl.find noper_table s)
	(* It is important that NOPER comes before OPER as all the nary opers
	 * are also in the oper_table, this is to optimise other parts of the
	 * code in inference *)
      with Not_found -> try OPER (Hashtbl.find oper_table s)
      with Not_found -> L_IDENT s
    )
# 726 "lex.ml"

  | 34 ->
# 314 "lex.mll"
    (
      let s = lexeme lexbuf in
      try Hashtbl.find keyword_table s
      with Not_found -> try Hashtbl.find symbol_table s
      with Not_found -> U_IDENT s
   )
# 736 "lex.ml"

  | 35 ->
# 322 "lex.mll"
   (
      let str = lexeme lexbuf in 
      WILDCARD (String.sub str  1 (String.length str -1))
   )
# 744 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_mainLex_rec lexbuf __ocaml_lex_state

and commentLex lexbuf =
    __ocaml_lex_commentLex_rec lexbuf 59
and __ocaml_lex_commentLex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 329 "lex.mll"
         ( incr comment_depth; commentLex lexbuf )
# 755 "lex.ml"

  | 1 ->
# 331 "lex.mll"
         ( decr comment_depth;
	   if !comment_depth == 0 
	   then () 
	   else commentLex lexbuf 
	 )
# 764 "lex.ml"

  | 2 ->
# 336 "lex.mll"
         ( incr_lex_counters lexbuf; commentLex lexbuf )
# 769 "lex.ml"

  | 3 ->
# 337 "lex.mll"
         ( basicError "unterminated comment" )
# 774 "lex.ml"

  | 4 ->
# 338 "lex.mll"
         ( commentLex lexbuf )
# 779 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_commentLex_rec lexbuf __ocaml_lex_state

and lineCommentLex lexbuf =
    __ocaml_lex_lineCommentLex_rec lexbuf 67
and __ocaml_lex_lineCommentLex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 342 "lex.mll"
         ( incr_lex_counters lexbuf; () )
# 790 "lex.ml"

  | 1 ->
# 343 "lex.mll"
        ( () )
# 795 "lex.ml"

  | 2 ->
# 344 "lex.mll"
        ( lineCommentLex lexbuf )
# 800 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lineCommentLex_rec lexbuf __ocaml_lex_state

and stringLex lexbuf =
    __ocaml_lex_stringLex_rec lexbuf 71
and __ocaml_lex_stringLex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 348 "lex.mll"
                                               ( Word "\b" )
# 811 "lex.ml"

  | 1 ->
# 349 "lex.mll"
                                               ( Word "\n" )
# 816 "lex.ml"

  | 2 ->
# 350 "lex.mll"
                                               ( Word "\r" )
# 821 "lex.ml"

  | 3 ->
# 351 "lex.mll"
                                               ( Word "\t" )
# 826 "lex.ml"

  | 4 ->
# 352 "lex.mll"
                                               ( Word "\\" )
# 831 "lex.ml"

  | 5 ->
# 353 "lex.mll"
                   ( Word " "  )
# 836 "lex.ml"

  | 6 ->
# 354 "lex.mll"
                   ( Word "\n"  )
# 841 "lex.ml"

  | 7 ->
# 355 "lex.mll"
                                               ( EOS       )
# 846 "lex.ml"

  | 8 ->
# 356 "lex.mll"
                    (Word "\\"  )
# 851 "lex.ml"

  | 9 ->
# 357 "lex.mll"
                     ( Word "\"" )
# 856 "lex.ml"

  | 10 ->
let
# 358 "lex.mll"
                                              word
# 862 "lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 358 "lex.mll"
                                                   ( Word(word) )
# 866 "lex.ml"

  | 11 ->
# 359 "lex.mll"
      ( Err )
# 871 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_stringLex_rec lexbuf __ocaml_lex_state

;;

# 366 "lex.mll"
  

exception SyntaxError of int * int * string (* line, column *)

(* post-lexer, pre-parser *)

(* The postlexer/preparser recognises directives. A "%" followed by an
   identifier ID at the beginning of a phrase means that the phrase is a
   directive, but all the lexer can produce is the infix operator "%" followed
   by ID. *)

let directive_alist =
  ["quit",      DIRECTIVE_quit;
   "hide",      DIRECTIVE_hide;
   "show",      DIRECTIVE_show;
   "cd",        DIRECTIVE_cd;
   "open",      DIRECTIVE_open;
(*> CPC *)
   "status",    DIRECTIVE_status]       (* Directive to display the process environment. *)
(*< CPC *)

let lookup_directive = Hashtbl.find (hash_table_from_list 12 directive_alist)

type post_processor_state =
  | Pp_start
  | Pp_directive
  | Pp_normal
let pp_state = ref Pp_start

let rec post_process lexer lexbuf =
  match lexer lexbuf with
  | L_IDENT id when !pp_state = Pp_directive ->
      begin try
        let directive = lookup_directive id in
        pp_state := Pp_normal; directive
      with Not_found -> raise Parse_error
      end
  | _ when !pp_state = Pp_directive ->
      raise Parse_error
  | SEMISEMI -> pp_state := Pp_start; SEMISEMI
  | PERCENT when !pp_state = Pp_start ->
      pp_state := Pp_directive; post_process lexer lexbuf
  | tok -> pp_state := Pp_normal; tok



(* lex, parse, report syntax errors *)

let runParser pr lexbuf =
  pp_state := Pp_start;
  line_number := 1;
  buf_pos := lexeme_end lexbuf;
  try pr (post_process mainLex) lexbuf
  with 
    Parse_error -> 
      let cur_pos = lexeme_start lexbuf 
      in	
      if (cur_pos >= !buf_pos)
      then raise 
	  (SyntaxError 
	     (!line_number,cur_pos - !buf_pos + 1,""))
      else raise (* last valid lexeme on previous line *)
	  (SyntaxError 
	     (!line_number - 1,cur_pos - !last_buf_pos + 1,""))
  | Failure message -> 
      let cur_pos = lexeme_start lexbuf 
      in	
      if (cur_pos >= !buf_pos)
      then raise 
	  (SyntaxError 
	     (!line_number,cur_pos - !buf_pos + 1,message))
      else raise (* last valid lexeme on previous line *)
	  (SyntaxError 
	     (!line_number - 1,cur_pos - !last_buf_pos + 1,message))
;;





# 958 "lex.ml"
