Here is the README from the public release of bondi
===================================================================


INSTALLATION:
  
  New users:  
  
  Please note bondi is developed in Ocaml. Ensure
  that your system has Ocaml installed. Bondi will not
  install without it. You can find download information 
  here: 
     
    http://caml.inria.fr/download.en.html
 

  To install bondi on your system, we have
  placed a shell script in the bondi directory
  called install-sh. To install bondi on your system,
  open a shell and type:

  ./install-sh

  You will see a whole lot of system checks and bondi
  will be be built after that. If you have
  root access then be sure to read the post build message.
  Install instructions are presented in the post build message.
  
  e.g Example of the post build message
 
  -----------------------------------------------------
	     Bondi build complete

   Bondi Environment Variables:
       BONDI_LIB_DIR: /usr/lib/bondi

   Bondi will install into the following directories:
       BIN: /usr/bin
       LIB: /usr/lib/bondi

   To install Bondi:
   1. ensure you have root privileges
   2. cd src
   3. make install
   4. cd ../

   *INSTALLATION WILL OVERWRITE EXISTING BONDI INSTALL*
  -----------------------------------------------------

  Administrators:

  To install from SVN repository:
  
  $ svn checkout https://subvert.it.uts.edu.au/bondi/bondi-2.0
  $ cd bondi/src
  $ ./configure --prefix=/usr  
  $ make depend
  $ make all
  $ make install

TESTING  

   Running Tests:

   1. From the bondi directory execute 
       $ ./run-tests-sh 
   2. This will provide a summary of testing 

	PASS: add_case.sh
	PASS: basic_tests.sh
	PASS: datum_tests.sh
	PASS: declaration_tests.sh
	PASS: dynamic_tests.sh
	PASS: imperative_tests.sh
	PASS: null.sh
	PASS: structure_poly_tests.sh
	==================
	All 8 tests passed
	==================

   Writing Tests:
   
   1. Write bondi code in a .bon file and save to tests/ directory. 
      A .bon file is tested for: 
      a) syntax 
      b) types
      c) evaluation. 
   2. To test the file execute $ ./run-tests-sh 
      A fail indicates that it failed in one of the preceding phases.

   OPTIONAL

   3. You can also place out bondi in an .out file. 
      This will generate two tests
      a) syntax, type checking and evaluation. 
      b) test the difference between the provided .out the system .out 
      
      If all .out files are validated this test acts like a regression test. 


